<?xml version="1.0" encoding="utf-8" ?>
<configuration>

  <configSections>
    <sectionGroup name="spring">
      <section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core" />
      <section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core" />
    </sectionGroup>
  </configSections>

  <spring>

    <context>
      <resource uri="config://spring/objects" />
    </context>

    <objects xmlns="http://www.springframework.net">


      <!--在使用Spring.NET框架的时候通常遇到怎样初始化和销毁非托管资源(如数据库连接)的麻烦，下面的解决方案可能对您有所帮助。
      　　1.初始化行为
      　　继承Spring.Objects.Factory.IInitializingObject接口或者配置object节点的init-method属性，Spring.NET的IoC框架就会帮我们在该对象被实例后调用配置好的初始化方法。
      　　2.销毁行为
      　　继承System.IDisposable接口或者在object节点配置destroy-method属性，Spring.NET会帮我们在容器被销毁时调用它。-->
      <!--生命周期接口-->
      <object id="person" type="Spring.Net.Demo.Lesson11.Person, Spring.Net.Demo.Lesson11"
              init-method="Init" destroy-method="Destroy" />

      <!--对象定义可能会包含大量的信息，比如与容器相关的信息（即初始化方法、静态工厂方法名等）、构造器参数和属性值等。子对象定义是指从一个父对象定义中继承了配置数据的对象定义。子对象定义可以根据需要重写或添加某些配置的值。使用父对象和子对象的定义方式可能会节省大量的键入工作。实际上这是设计模式中模板模式的一种形式。个人认为可以解决“子类”与“父类”之间的耦合。
      　　在object节点中设置parent属性来指明是继承关系，而并非正真意义的继承。-->
      <!--抽象对象定义和子对象定义-->
      <object id="parent" type="Spring.Net.Demo.Lesson11.Parent, Spring.Net.Demo.Lesson11" abstract="true">
        <property name="Name" value="parent"/>
      </object>

      <object id="child" type="Spring.Net.Demo.Lesson11.Child, Spring.Net.Demo.Lesson11" parent="parent"/>

    </objects>


  </spring>
  
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
    </startup>
</configuration>