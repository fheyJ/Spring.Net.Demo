<?xml version="1.0" encoding="utf-8" ?>
<configuration>

  
  <configSections>
    <sectionGroup name="spring">
      <section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core" />
      <section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core" />
    </sectionGroup>
  </configSections>

  <spring>

    <context>
      <resource uri="config://spring/objects" />
    </context>
    <!--        1    ObjectNameAutoProxyCreator  NameMatchMethodPointcutAdvisor   -->
    <!-- ObjectNameAutoProxyCreator可以用特定的文本值或通配符匹配目标对象的名称，并为满足条件的目标对象创建AOP代理。
  该类支持模式匹配字符串，如："*name"，"name*"，”*name*“和精确文本如"name"。我们可以通过下面这个简单的例子了解一下自动代理的功能。-->
    <!--<objects xmlns="http://www.springframework.net" xmlns:aop="http://www.springframework.net/aop">
      <description>配置实现AOP</description>

      <object id="ProxyCreator" type="Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator, Spring.Aop">
        --><!--配置需要拦截的目标类，这里*指向下面的两个service--><!--
        <property name="ObjectNames">
          <list>
            <value>*Service</value>
          </list>
        </property>
        --><!--配置拦截器--><!--
        <property name="InterceptorNames">
          <list>
            <value>aroundAdvisor</value>
          </list>
        </property>
      </object>
      --><!--拦截器--><!--
      <object id="aroundAdvice" type="Spring.Net.Demo.Lesson15.Advice.AroundAdvice, Spring.Net.Demo.Lesson15"/>
      
      --><!--动态拦截器，指定方法--><!--
      <object id="aroundAdvisor" type="Spring.Aop.Support.NameMatchMethodPointcutAdvisor, Spring.Aop">
        <property name="Advice" ref="aroundAdvice"/>
        <property name="MappedNames">
          <list>
            --><!--只执行Find方法--><!--
            <value>Find*</value>
          </list>
        </property>
      </object>
      <object id="categoryService" type="Spring.Net.Demo.Lesson15.Service.CategoryService, Spring.Net.Demo.Lesson15"/>
      <object id="productService" type="Spring.Net.Demo.Lesson15.Service.ProductService, Spring.Net.Demo.Lesson15"/>
    </objects>-->


    <!--   2. RegularExpressionMethodPointcutAdvisor 正则表达式切入点-->
    <!--DefaultAdvisorAutoProxyCreator类会在当前容器中自动应用满足条件的Advisor，而不用在自动代理Advisor的对象定义中包含特定的对象名。
    它既可以保持配置文件的一致性，又可避免ObjectNameAutoProxyCreator引起的配置文件的臃肿。-->
    <!--<objects xmlns="http://www.springframework.net" xmlns:aop="http://www.springframework.net/aop">
      <description>配置实现AOP</description>

      <object id="aroundAdvisor" type="Spring.Aop.Support.RegularExpressionMethodPointcutAdvisor, Spring.Aop">
        <property name="advice" ref="aroundAdvice"/>
        <property name="patterns">
          <list>
            <value>.*Find*.*</value>
          </list>
        </property>
      </object>

      --><!--必须让Spring.NET容器管理DefaultAdvisorAutoProxyCreator类--><!--
      <object id="ProxyCreator" type="Spring.Aop.Framework.AutoProxy.DefaultAdvisorAutoProxyCreator, Spring.Aop"/>

      <object id="aroundAdvice" type="Spring.Net.Demo.Lesson15.Advice.AroundAdvice, Spring.Net.Demo.Lesson15"/>


      <object id="categoryService" type="Spring.Net.Demo.Lesson15.Service.CategoryService, Spring.Net.Demo.Lesson15"/>
      <object id="productService" type="Spring.Net.Demo.Lesson15.Service.ProductService, Spring.Net.Demo.Lesson15"/>

    </objects>-->


    <!--3. 以上配置相对复杂一点。使用SdkRegularExpressionMethodPointcut的配置就相对简单的多，而项目中SdkRegularExpressionMethodPointcut也经常用到。
    　　SdkRegularExpressionMethodPointcut只需要简单的配置一下通知和切入点就完成了。-->
    <objects xmlns="http://www.springframework.net" xmlns:aop="http://www.springframework.net/aop">
      <description>配置实现AOP</description>

      <aop:config>
        <aop:advisor pointcut-ref="pointcut" advice-ref="aroundAdvice"/>
      </aop:config>
      
      <object id="pointcut" type="Spring.Aop.Support.SdkRegularExpressionMethodPointcut, Spring.Aop">
        <property name="pattern" value="Service.*.Find*"/>
      </object>

      <object id="aroundAdvice" type="Spring.Net.Demo.Lesson15.Advice.AroundAdvice, Spring.Net.Demo.Lesson15"/>

      <object id="categoryService" type="Spring.Net.Demo.Lesson15.Service.CategoryService, Spring.Net.Demo.Lesson15"/>
      <object id="productService" type="Spring.Net.Demo.Lesson15.Service.ProductService, Spring.Net.Demo.Lesson15"/>

    </objects>

    <!--pattern属性为拦截表达式。Service.*的意思是，拦截Service命名空间下(包括子空间)的所有类。
    如果改为Service.*.Find*"，意思为拦截Service命名空间下(包括子空间)的所有类以Find开头的方法或Service命名空间下以Find开头的所有类-->

  </spring>
</configuration>